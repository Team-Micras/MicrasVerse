#ifndef MOTOR_HPP
#define MOTOR_HPP

#include "physics/i_motor.hpp"
#include "config/constants.hpp"
#include "box2d/box2d.h"
#include <algorithm>

namespace micrasverse::physics {

class Motor : public IMotor {
private:
    float resistance;           // Motor resistance (R)
    float ke;                   // Back EMF constant
    float kt;                   // Torque constant
    float maxVoltage;           // Maximum input voltage
    float inputCommand;         // Motor command (-100 to +100)
    float current;              // Current through the motor
    float angularVelocity;      // Angular velocity of the rotor
    float frictionCoefficient;  // Coefficient of friction (mu)
    float bodyMass;             // Mass of the body
    float appliedForce;         // Force applied by the motor
    float torque;               // Torque generated by the motor
    float bodyLinearVelocity;   // Linear velocity of the body
    float bodyAngularVelocity;  // Angular velocity of the body
    float t_angle;              // Angle of the motor on the body
    bool leftWheel;             // Is this a left wheel?
    bool isFanOn;               // Is the fan on?

    // Box2D specific properties
    b2BodyId bodyId;            // Body to apply the force to
    b2Vec2 localPosition;       // Local position of the motor on the body
    b2Vec2 localDirection;      // Local direction of the motor on the body
    float angle;                // Angle of the motor on the body

public:
    Motor(b2BodyId bodyId, b2Vec2 localPosition, bool leftWheel, const float angle = B2_PI / 2.0f, 
          float R = MOTOR_RESISTANCE, float ke = MOTOR_KE, float kt = MOTOR_KT, float maxVoltage = MOTOR_MAX_VOLTAGE);

    // Implement IMotor interface
    void setCommand(float command) override;
    void update(float deltaTime, bool isFanOn) override;
    float getCurrent() const override;
    float getAngularVelocity() const override;
    float getAppliedForce() const override;
    float getTorque() const override;
    float getBodyLinearVelocity() const override;
    float getBodyAngularVelocity() const override;
    bool isLeftWheel() const override;
    bool getFanState() const override;
};

} // namespace micrasverse::physics

#endif // MOTOR_HPP
